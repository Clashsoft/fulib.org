plugins {
	id 'java'
	id 'application'
	id 'maven-publish'
	id 'com.jfrog.bintray' version '1.8.4'
	id 'de.clashsoft.simple-publish' version '0.3.0'
	id 'com.github.johnrengelman.shadow' version '4.0.4'
}

mainClassName = 'org.fulib.scenarios.WebService'

group = 'org.fulib'
version = "git describe --tags".execute().text[1..-2] // strip v and \n
description = 'The fulib.org website and Fulib Scenarios Web App'

publishInfo {
	websiteUrl = 'https://www.fulib.org/'
	issueTrackerUrl = 'https://github.com/fujaba/fulib.org/issues'
	vcsUrl = 'https://github.com/fujaba/fulib.org'
	githubRepo = 'fujaba/fulib.org'
	labels = [ 'fulib', 'scenarios', 'webapp', 'website' ]

	license {
		shortName = 'BSD 3-Clause'
		longName = 'BSD 3-Clause "New" or "Revised" License'
		url = 'https://opensource.org/licenses/BSD-3-Clause'
	}

	developer {
		id = 'clashsoft'
		name = 'Adrian Kunz'
		email = 'clashsoft@hotmail.com'
	}

	developer {
		id = 'azuendorf'
		name = 'Albert ZÃ¼ndorf'
		email = 'zuendorf@uni-kassel.de'
	}
}

sourceCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	// --------------- Fulib Libraries ---------------

	compile group: 'org.fulib', name: 'fulibScenarios', version: '[0.5.0,)'

	compile group: 'org.fulib', name: 'fulibMockups', version: '[0.1.0,)'

	// --------------- Other Libraries ---------------
	compile 'org.slf4j:slf4j-nop:1.7.25'

	compile "com.sparkjava:spark-core:2.8.0"

	compile group: 'org.json', name: 'json', version: '20090211'

	// compile instead of testCompile because the web service uses it
	compile group: 'junit', name: 'junit', version: '4.12'
}

wrapper.doLast {
	copy {
		from '.'
		include 'gradle/wrapper/**', 'gradlew', 'gradlew.bat'
		into 'src/main/resources/projectzip'

		// we have to save the wrapper jar as a zip, see
		// https://imperceptiblethoughts.com/shadow/configuration/dependencies/
		// "Embedding Jar Files Inside Your Shadow Jar"
		rename 'gradle-wrapper.jar', 'gradle-wrapper.jar.zip'
	}
}

shadowJar.archiveClassifier = 'all'

processResources {
	filesMatching([ 'webapp/index.html', 'projectzip/build.gradle' ]) {
		filter {
			it = it.replace('$$version$$', project.version.toString())
			it = it.replace('$$fulibScenariosVersion$$', getDependencyVersion(configurations.compile, 'org.fulib',
					'fulibScenarios'))
			it = it.replace('$$fulibMockupsVersion$$', getDependencyVersion(configurations.compile, 'org.fulib',
					'fulibMockups'))
			it
		}
	}
}

String getDependencyVersion(Configuration config, String group, String name) {
	config.resolvedConfiguration.firstLevelModuleDependencies.findAll {
		it.moduleName == name && it.moduleGroup == group
	}[0].moduleVersion
}
