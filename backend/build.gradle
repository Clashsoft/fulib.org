// --------------- Plugins ---------------

plugins {
	id 'java'
	id 'application'
	// https://plugins.gradle.org/plugin/com.github.johnrengelman.shadow
	id 'com.github.johnrengelman.shadow' version '5.2.0'
}

// --------------- Publication Info ---------------

group = 'org.fulib'
version = "git describe --tags".execute().text[1..-2] // strip v and \n
description = 'The fulib.org website and fulibScenarios Web App'

// --------------- General Settings ---------------

mainClassName = 'org.fulib.webapp.WebService'

shadowJar.archiveClassifier = 'all'

// --------------- Dependencies ---------------

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	// --------------- Fulib Libraries ---------------

	compile fulibScenariosDependency
	compile fulibMockupsDependency
	compile fulibTablesDependency

	// --------------- Other Libraries ---------------

	// https://mvnrepository.com/artifact/commons-io/commons-io
	compile group: 'commons-io', name: 'commons-io', version: '2.8.0'

	// https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
	compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'

	// https://mvnrepository.com/artifact/com.sparkjava/spark-core
	compile group: 'com.sparkjava', name: 'spark-core', version: '2.9.3'

	// https://mvnrepository.com/artifact/org.json/json
	compile group: 'org.json', name: 'json', version: '20201115'

	// https://mvnrepository.com/artifact/org.mongodb/mongodb-driver-sync
	compile group: 'org.mongodb', name: 'mongodb-driver-sync', version: '3.12.8'

	// https://mvnrepository.com/artifact/com.auth0/java-jwt
	compile group: 'com.auth0', name: 'java-jwt', version: '3.13.0'

	// compile instead of testCompile because the web service uses it
	compile junitDependency

	// https://mvnrepository.com/artifact/org.mockito/mockito-core
	testCompile group: 'org.mockito', name: 'mockito-core', version: '3.8.0'

	// --------------- CommonMark ---------------

	// https://mvnrepository.com/artifact/org.commonmark/commonmark
	compile group: 'org.commonmark', name: 'commonmark', version: '0.17.1'

	// https://mvnrepository.com/artifact/org.commonmark/commonmark-ext-gfm-tables
	compile group: 'org.commonmark', name: 'commonmark-ext-gfm-tables', version: '0.17.1'

	// https://mvnrepository.com/artifact/org.commonmark/commonmark-ext-autolink
	compile group: 'org.commonmark', name: 'commonmark-ext-autolink', version: '0.17.1'

	// https://mvnrepository.com/artifact/org.commonmark/commonmark-ext-gfm-strikethrough
	compile group: 'org.commonmark', name: 'commonmark-ext-gfm-strikethrough', version: '0.17.1'

	// https://mvnrepository.com/artifact/org.commonmark/commonmark-ext-task-list-items
	compile group: 'org.commonmark', name: 'commonmark-ext-task-list-items', version: '0.17.1'
}

// --------------- Version Injection ---------------

processResources {
	def version = project.version.toString()
	def fulibVersion = getDependencyVersion(configurations.compile, 'org.fulib', 'fulib')
	def fulibToolsVersion = getDependencyVersion(configurations.compile, 'org.fulib', 'fulibTools')
	def fulibYamlVersion = getDependencyVersion(configurations.compile, 'org.fulib', 'fulibYaml')
	def fulibTablesVersion = getDependencyVersion(configurations.compile, 'org.fulib', 'fulibTables')
	def fulibScenariosVersion = getDependencyVersion(configurations.compile, 'org.fulib', 'fulibScenarios')
	def fulibGradleVersion = getDependencyVersion(rootProject.buildscript.configurations.classpath, 'org.fulib', 'fulibGradle')
	def fulibMockupsVersion = getDependencyVersion(configurations.compile, 'org.fulib', 'fulibMockups')

	from(rootProject.rootDir) {
		include 'gradle/wrapper/**', 'gradlew', 'gradlew.bat'
		into 'org/fulib/webapp/projectzip'

		// we have to save the wrapper jar as a zip, see
		// https://imperceptiblethoughts.com/shadow/configuration/dependencies/#embedding-jar-files-inside-your-shadow-jar
		rename 'gradle-wrapper.jar', 'gradle-wrapper.jar.zip'
	}

	filesMatching([
			'org/fulib/webapp/projectzip/build.gradle',
			'org/fulib/webapp/version.properties',
	]) {
		filter {
			it = it.replace('$$version$$', version)
			it = it.replace('$$fulibVersion$$', fulibVersion)
			it = it.replace('$$fulibToolsVersion$$', fulibToolsVersion)
			it = it.replace('$$fulibYamlVersion$$', fulibYamlVersion)
			it = it.replace('$$fulibTablesVersion$$', fulibTablesVersion)
			it = it.replace('$$fulibScenariosVersion$$', fulibScenariosVersion)
			it = it.replace('$$fulibMockupsVersion$$', fulibMockupsVersion)
			it = it.replace('$$fulibGradleVersion$$', fulibGradleVersion)
			it
		}
	}
}

String getDependencyVersion(Configuration config, String group, String name) {
	config.resolvedConfiguration.resolvedArtifacts.findResult {
		def id = it.moduleVersion.id
		id.group == group && id.name == name ? id.version : null
	}
}
